C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\build\Target 1\main.o
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe .\MAIN.C PRINT(.\build\Target 1\main.lst) OMF2 TABS(4) CODE NOCOND SYMBO
                    -LS OPTIMIZE(8,SPEED) SMALL ROM(LARGE) INCDIR(C:\Keil_v5\C51\INC\STC;C:\Keil_v5\C51\INC) DEFINE(__UVISION_VERSION=526) OB
                    -JECT(.\build\Target 1\main.o)

line level    source

   1          /*
   2           * @Descripttion: 数码管动态显示实现倒计时，并只保留有效位
   3           * @Author: 五月雨
   4           * @Date: 2022-01-13 16:36:08
   5           * @LastEditors: 五月雨
   6           * @LastEditTime: 2022-01-31 11:50:28
   7           * @Board: 清翔51开发板
   8           * @Chip: STC89C52
   9           */
  10          #include <STC89C5xRC.H>
  11          
  12          sbit SEG = P2^6;                    //段选
  13          sbit DIG = P2^7;                    //位选
  14          sbit KEY_S2 = P3^0;                 
  15          sbit KEY_S3 = P3^1;
  16          sbit KEY_S4 = P3^2;
  17          sbit KEY_S5 = P3^3;
  18          
  19          unsigned char code LedChar[] = {    //数码管显示字符转换表
  20              0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
  21              0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
  22          };
  23          unsigned char LedBuf[] = {          //数码管显示缓冲区
  24              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  25          };
  26          unsigned char KeyStaCur[] = {       //按键当前状态
  27              1, 1, 1, 1
  28          };
  29          
  30          bit StopwatchRunning = 0;           //秒表运行状态标志
  31          bit StopwatchRefresh = 1;           //秒表计数刷新标志，初始为1，以刷新显示初值
  32          unsigned char DecimalPart = 0;      //秒表计时小数部分
  33          unsigned int IntegerPart = 0;       //秒表计时整数部分
  34          //下列写法便于更改定时器中断间隔（定时器初始化配置过程写为函数）
  35          unsigned char T0RH = 0;             //T0重装值的高字节
  36          unsigned char T0RL = 0;             //T0重装值的低字节
  37          
  38          void ConfigTimer0ms(unsigned int ms);
  39          void StopwatchDisplay();
  40          void StopwatchAction();
  41          void StopwatchReset();
  42          void KeyDriver();
  43          void LedScan();
  44          void KeyScan();
  45          void StopwatchCount();
  46          
  47          void main()
  48          {
  49   1          EA = 1;
  50   1          ConfigTimer0ms(2);  //T0定时为2ms（独立键盘扫描2ms足够快）
  51   1      
  52   1          while(1)
  53   1          {
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 2   

  54   2              if(StopwatchRefresh)
  55   2              {
  56   3                  StopwatchRefresh = 0;
  57   3                  StopwatchDisplay();
  58   3              }
  59   2              KeyDriver();
  60   2          }
  61   1      }
  62          
  63          /* 定时器初始化函数 */
  64          void ConfigTimer0ms(unsigned int ms)
  65          {
  66   1          unsigned long tmp;
  67   1          tmp = 11059200 / 12;
  68   1          tmp = (tmp * ms) / 1000;
  69   1          tmp = 65536 - tmp;
  70   1          tmp += 32;                      //补偿中断相应延时造成的误差
  71   1          TMOD = 0x01;
  72   1          /*
  73   1          可以写成这种形式防止影响到tmod的其他位，但这里没必要
  74   1          TMOD &= 0xF0;
  75   1          TMOD |= 0x01;
  76   1          */
  77   1          T0RH = (unsigned char)(tmp >> 8);
  78   1          T0RL = (unsigned char)tmp;
  79   1          ET0 = 1;
  80   1          TR0 = 1;
  81   1      }
  82          
  83          /* 秒表计数转换为数码管显示字符函数 */
  84          void StopwatchDisplay()
  85          {
  86   1          unsigned char i;
  87   1          unsigned char buf[4];
  88   1      
  89   1          LedBuf[7] = LedChar[DecimalPart % 10];       //这里小数部分都需要显示
  90   1          LedBuf[6] = LedChar[DecimalPart / 10];       //所以不需要放到缓冲区
  91   1      
  92   1          buf[3] = IntegerPart % 10;          //放入缓冲区，避免影响Ledbuf中的数据
  93   1          buf[2] = (IntegerPart/10) % 10;
  94   1          buf[1] = (IntegerPart/100) % 10;
  95   1          buf[0] = (IntegerPart/1000) % 10;
  96   1      
  97   1          for(i = 0; i <= 2; i++)             //无效位不显示
  98   1          {
  99   2              if(buf[i] == 0)
 100   2                  LedBuf[i+2] = 0x00;
 101   2              else
 102   2                  break;
 103   2          }
 104   1          for( ; i <= 3; i++)                 //只显示有效位
 105   1          {
 106   2              LedBuf[i+2] = LedChar[buf[i]];
 107   2          }
 108   1          LedBuf[5] |= (1 << 7);              //点亮小数点
 109   1      }
 110          
 111          /* 秒表启停函数 */
 112          void StopwatchAction()
 113          {
 114   1          if(StopwatchRunning)
 115   1              StopwatchRunning = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 3   

 116   1          else 
 117   1              StopwatchRunning = 1;
 118   1      }
 119          
 120          /* 秒表复位函数 */
 121          void StopwatchReset()
 122          {
 123   1          StopwatchRunning = 0;               //停止秒表
 124   1          DecimalPart = 0;                    //清0计数值
 125   1          IntegerPart = 0;
 126   1          StopwatchRefresh = 1;               //标记请求复位
 127   1      }
 128          
 129          /* 按键驱动函数 */
 130          void KeyDriver()
 131          {
 132   1          unsigned char i;
 133   1          static unsigned char backup[] = {1, 1, 1, 1};     //备份上一次按键的状态
 134   1      
 135   1          for(i = 0; i < 4; i++)
 136   1          {
 137   2              if(backup[i] != KeyStaCur[i])
 138   2              {
 139   3                  if(KeyStaCur[i] == 0)                   //若按键按下
 140   3                  {
 141   4                      if(i == 1)                          //若按下复位键
 142   4                          StopwatchReset();               //复位秒表
 143   4                      else if(i == 2)                     //若按下启停键
 144   4                          StopwatchAction();              //启停秒表
 145   4                  }
 146   3                  backup[i] = KeyStaCur[i];               //更新前一次备份值
 147   3              }
 148   2          }
 149   1      }
 150          
 151          /* 数码管动态扫描函数 */
 152          void LedScan()
 153          {
 154   1          static unsigned char idx = 0;
 155   1      
 156   1          P0 = 0x00;          //避免产生交替重影
 157   1          SEG = 1;
 158   1          SEG = 0;
 159   1      
 160   1          P0 = 0xFF;          //位消隐
 161   1          DIG = 1;
 162   1          P0 &= ~(1 << idx);
 163   1          DIG = 0;
 164   1      
 165   1          P0 = 0x00;          //段消隐
 166   1          SEG = 1;
 167   1          P0 = LedBuf[idx];
 168   1          SEG = 0;
 169   1      
 170   1          if(idx < 7)         //更新数码管扫描索引
 171   1              idx++;
 172   1          else 
 173   1              idx = 0;
 174   1      }
 175          
 176          /* 键盘动态扫描函数 */
 177          void KeyScan()
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 4   

 178          {
 179   1          unsigned char i;
 180   1          static unsigned char keybuf[] = {
 181   1              0xFF, 0xFF, 0xFF, 0xFF
 182   1          };
 183   1      
 184   1          keybuf[0] = (keybuf[0] << 1) | KEY_S2;
 185   1          keybuf[1] = (keybuf[1] << 1) | KEY_S3;
 186   1          keybuf[2] = (keybuf[2] << 1) | KEY_S4;
 187   1          keybuf[3] = (keybuf[3] << 1) | KEY_S5;
 188   1      
 189   1          //扫描独立按键，只有4个键
 190   1          //取2ms采用间隔，
 191   1          for(i = 0; i < 4; i++)
 192   1          {
 193   2              if(keybuf[i] == 0x00)
 194   2                  KeyStaCur[i] = 0;
 195   2              else if(keybuf[i] == 0xFF)
 196   2                  KeyStaCur[i] = 1;
 197   2          }
 198   1      }
 199          
 200          /* 秒表计时函数 */
 201          void StopwatchCount()
 202          {
 203   1          if(StopwatchRunning)                //若秒表仍在计数，则更新计数值
 204   1          {   
 205   2              DecimalPart++;                  //满10ms，小数部分加1
 206   2              if(DecimalPart >= 100)          //满1000ms，即满1s
 207   2              {
 208   3                  IntegerPart++;              //整数部分加1
 209   3                  DecimalPart = 0;            //并把小数部分清零
 210   3                  if(IntegerPart >= 10000)    //控制计时范围在0~10000秒
 211   3                  {
 212   4                      IntegerPart = 0;
 213   4                  }
 214   3              }
 215   2              StopwatchRefresh = 1;  
 216   2          }         //计时值更新后，设置秒表刷新标志为1
 217   1      }
 218          
 219          /* 中断服务函数，完成秒表计时，数码管和按键的动态扫描*/
 220          void InterruptTimer0() interrupt 1
 221          {
 222   1          static unsigned char timer_2ms = 0;     
 223   1          
 224   1          TH0 = T0RH;                 
 225   1          TL0 = T0RL;
 226   1          
 227   1          LedScan();
 228   1          KeyScan();
 229   1      
 230   1          timer_2ms++;                //中断一次为2ms，5次即为10ms
 231   1          if(timer_2ms >= 5)          //计时满10ms
 232   1          {
 233   2              timer_2ms = 0;
 234   2              StopwatchCount();       //调用秒表计时函数
 235   2          }
 236   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0000 D2AF              SETB    EA
                                           ; SOURCE LINE # 50
0002 7F02              MOV     R7,#02H
0004 7E00              MOV     R6,#00H
0006 120000      R     LCALL   _ConfigTimer0ms
0009         ?C0001:
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0009 300005            JNB     StopwatchRefresh,?C0003
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
000C C200        R     CLR     StopwatchRefresh
                                           ; SOURCE LINE # 57
000E 120000      R     LCALL   StopwatchDisplay
                                           ; SOURCE LINE # 58
0011         ?C0003:
                                           ; SOURCE LINE # 59
0011 120000      R     LCALL   KeyDriver
                                           ; SOURCE LINE # 60
0014 80F3              SJMP    ?C0001
             ; FUNCTION main (END)

             ; FUNCTION _ConfigTimer0ms (BEGIN)
                                           ; SOURCE LINE # 64
;---- Variable 'ms' assigned to Register 'R2/R3' ----
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 67
0000 750000      R     MOV     tmp+03H,#00H
0003 750010      R     MOV     tmp+02H,#010H
0006 75000E      R     MOV     tmp+01H,#0EH
0009 750000      R     MOV     tmp,#00H
                                           ; SOURCE LINE # 68
000C E4                CLR     A
000D FC                MOV     R4,A
000E FD                MOV     R5,A
000F AB00        R     MOV     R3,tmp+03H
0011 AA00        R     MOV     R2,tmp+02H
0013 A900        R     MOV     R1,tmp+01H
0015 A800        R     MOV     R0,tmp
0017 120000      E     LCALL   ?C?LMUL
001A E4                CLR     A
001B 7BE8              MOV     R3,#0E8H
001D 7A03              MOV     R2,#03H
001F F9                MOV     R1,A
0020 F8                MOV     R0,A
0021 120000      E     LCALL   ?C?ULDIV
0024 8F00        R     MOV     tmp+03H,R7
0026 8E00        R     MOV     tmp+02H,R6
0028 8D00        R     MOV     tmp+01H,R5
002A 8C00        R     MOV     tmp,R4
                                           ; SOURCE LINE # 69
002C C3                CLR     C
002D E4                CLR     A
002E 9500        R     SUBB    A,tmp+03H
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 6   

0030 F500        R     MOV     tmp+03H,A
0032 E4                CLR     A
0033 9500        R     SUBB    A,tmp+02H
0035 F500        R     MOV     tmp+02H,A
0037 7401              MOV     A,#01H
0039 9500        R     SUBB    A,tmp+01H
003B F500        R     MOV     tmp+01H,A
003D E4                CLR     A
003E 9500        R     SUBB    A,tmp
0040 F500        R     MOV     tmp,A
                                           ; SOURCE LINE # 70
0042 E500        R     MOV     A,tmp+03H
0044 2420              ADD     A,#020H
0046 F500        R     MOV     tmp+03H,A
0048 E4                CLR     A
0049 3500        R     ADDC    A,tmp+02H
004B F500        R     MOV     tmp+02H,A
004D E4                CLR     A
004E 3500        R     ADDC    A,tmp+01H
0050 F500        R     MOV     tmp+01H,A
0052 E4                CLR     A
0053 3500        R     ADDC    A,tmp
0055 F500        R     MOV     tmp,A
                                           ; SOURCE LINE # 71
0057 758901            MOV     TMOD,#01H
                                           ; SOURCE LINE # 77
005A AF00        R     MOV     R7,tmp+03H
005C AE00        R     MOV     R6,tmp+02H
005E AD00        R     MOV     R5,tmp+01H
0060 AC00        R     MOV     R4,tmp
0062 7808              MOV     R0,#08H
0064 120000      E     LCALL   ?C?ULSHR
0067 8F00        R     MOV     T0RH,R7
                                           ; SOURCE LINE # 78
0069 850000      R     MOV     T0RL,tmp+03H
                                           ; SOURCE LINE # 79
006C D2A9              SETB    ET0
                                           ; SOURCE LINE # 80
006E D28C              SETB    TR0
                                           ; SOURCE LINE # 81
0070 22                RET     
             ; FUNCTION _ConfigTimer0ms (END)

             ; FUNCTION StopwatchDisplay (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 89
0000 E500        R     MOV     A,DecimalPart
0002 75F00A            MOV     B,#0AH
0005 84                DIV     AB
0006 E5F0              MOV     A,B
0008 900000      R     MOV     DPTR,#LedChar
000B 93                MOVC    A,@A+DPTR
000C F500        R     MOV     LedBuf+07H,A
                                           ; SOURCE LINE # 90
000E E500        R     MOV     A,DecimalPart
0010 75F00A            MOV     B,#0AH
0013 84                DIV     AB
0014 93                MOVC    A,@A+DPTR
0015 F500        R     MOV     LedBuf+06H,A
                                           ; SOURCE LINE # 92
0017 AE00        R     MOV     R6,IntegerPart
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 7   

0019 AF00        R     MOV     R7,IntegerPart+01H
001B 7C00              MOV     R4,#00H
001D 7D0A              MOV     R5,#0AH
001F 120000      E     LCALL   ?C?UIDIV
0022 8D00        R     MOV     buf+03H,R5
                                           ; SOURCE LINE # 93
0024 AE00        R     MOV     R6,IntegerPart
0026 AF00        R     MOV     R7,IntegerPart+01H
0028 7C00              MOV     R4,#00H
002A 7D0A              MOV     R5,#0AH
002C 120000      E     LCALL   ?C?UIDIV
002F 7C00              MOV     R4,#00H
0031 7D0A              MOV     R5,#0AH
0033 120000      E     LCALL   ?C?UIDIV
0036 8D00        R     MOV     buf+02H,R5
                                           ; SOURCE LINE # 94
0038 AE00        R     MOV     R6,IntegerPart
003A AF00        R     MOV     R7,IntegerPart+01H
003C 7C00              MOV     R4,#00H
003E 7D64              MOV     R5,#064H
0040 120000      E     LCALL   ?C?UIDIV
0043 7C00              MOV     R4,#00H
0045 7D0A              MOV     R5,#0AH
0047 120000      E     LCALL   ?C?UIDIV
004A 8D00        R     MOV     buf+01H,R5
                                           ; SOURCE LINE # 95
004C AE00        R     MOV     R6,IntegerPart
004E AF00        R     MOV     R7,IntegerPart+01H
0050 7C03              MOV     R4,#03H
0052 7DE8              MOV     R5,#0E8H
0054 120000      E     LCALL   ?C?UIDIV
0057 7C00              MOV     R4,#00H
0059 7D0A              MOV     R5,#0AH
005B 120000      E     LCALL   ?C?UIDIV
005E 8D00        R     MOV     buf,R5
                                           ; SOURCE LINE # 97
;---- Variable 'i' assigned to Register 'R7' ----
0060 E4                CLR     A
0061 FF                MOV     R7,A
0062         ?C0006:
0062 EF                MOV     A,R7
0063 D3                SETB    C
0064 9402              SUBB    A,#02H
0066 7480              MOV     A,#080H
0068 9480              SUBB    A,#080H
006A 5010              JNC     ?C0011
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
006C 7400        R     MOV     A,#LOW buf
006E 2F                ADD     A,R7
006F F8                MOV     R0,A
0070 E6                MOV     A,@R0
0071 7009              JNZ     ?C0011
                                           ; SOURCE LINE # 100
0073 7400        R     MOV     A,#LOW LedBuf+02H
0075 2F                ADD     A,R7
0076 F8                MOV     R0,A
0077 E4                CLR     A
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0079 0F                INC     R7
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 8   

007A 80E6              SJMP    ?C0006
                                           ; SOURCE LINE # 104
007C         ?C0011:
007C EF                MOV     A,R7
007D D3                SETB    C
007E 9403              SUBB    A,#03H
0080 7480              MOV     A,#080H
0082 9480              SUBB    A,#080H
0084 5013              JNC     ?C0012
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0086 7400        R     MOV     A,#LOW buf
0088 2F                ADD     A,R7
0089 F8                MOV     R0,A
008A E6                MOV     A,@R0
008B 900000      R     MOV     DPTR,#LedChar
008E 93                MOVC    A,@A+DPTR
008F FE                MOV     R6,A
0090 7400        R     MOV     A,#LOW LedBuf+02H
0092 2F                ADD     A,R7
0093 F8                MOV     R0,A
0094 A606              MOV     @R0,AR6
                                           ; SOURCE LINE # 107
0096 0F                INC     R7
0097 80E3              SJMP    ?C0011
0099         ?C0012:
                                           ; SOURCE LINE # 108
0099 430080      R     ORL     LedBuf+05H,#080H
                                           ; SOURCE LINE # 109
009C 22                RET     
             ; FUNCTION StopwatchDisplay (END)

             ; FUNCTION StopwatchAction (BEGIN)
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
0000 300003            JNB     StopwatchRunning,?C0015
                                           ; SOURCE LINE # 115
0003 C200        R     CLR     StopwatchRunning
0005 22                RET     
0006         ?C0015:
                                           ; SOURCE LINE # 117
0006 D200        R     SETB    StopwatchRunning
                                           ; SOURCE LINE # 118
0008         ?C0017:
0008 22                RET     
             ; FUNCTION StopwatchAction (END)

             ; FUNCTION StopwatchReset (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0000 C200        R     CLR     StopwatchRunning
                                           ; SOURCE LINE # 124
0002 E4                CLR     A
0003 F500        R     MOV     DecimalPart,A
                                           ; SOURCE LINE # 125
0005 F500        R     MOV     IntegerPart,A
0007 F500        R     MOV     IntegerPart+01H,A
                                           ; SOURCE LINE # 126
0009 D200        R     SETB    StopwatchRefresh
                                           ; SOURCE LINE # 127
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 9   

000B 22                RET     
             ; FUNCTION StopwatchReset (END)

             ; FUNCTION KeyDriver (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 135
;---- Variable 'i' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0019:
0002 EF                MOV     A,R7
0003 FD                MOV     R5,A
0004 7C00              MOV     R4,#00H
0006 C3                CLR     C
0007 9404              SUBB    A,#04H
0009 7480              MOV     A,#080H
000B 9480              SUBB    A,#080H
000D 5032              JNC     ?C0027
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
000F 7400        R     MOV     A,#LOW KeyStaCur
0011 2F                ADD     A,R7
0012 F8                MOV     R0,A
0013 E6                MOV     A,@R0
0014 FE                MOV     R6,A
0015 7400        R     MOV     A,#LOW backup
0017 2F                ADD     A,R7
0018 F8                MOV     R0,A
0019 E6                MOV     A,@R0
001A 6E                XRL     A,R6
001B 6021              JZ      ?C0021
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
001D EE                MOV     A,R6
001E 7012              JNZ     ?C0023
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0020 ED                MOV     A,R5
0021 6401              XRL     A,#01H
0023 7005              JNZ     ?C0024
                                           ; SOURCE LINE # 142
0025 120000      R     LCALL   StopwatchReset
0028 8008              SJMP    ?C0023
002A         ?C0024:
                                           ; SOURCE LINE # 143
002A EF                MOV     A,R7
002B 6402              XRL     A,#02H
002D 7003              JNZ     ?C0023
                                           ; SOURCE LINE # 144
002F 120000      R     LCALL   StopwatchAction
                                           ; SOURCE LINE # 145
0032         ?C0023:
                                           ; SOURCE LINE # 146
0032 7400        R     MOV     A,#LOW KeyStaCur
0034 2F                ADD     A,R7
0035 F8                MOV     R0,A
0036 E6                MOV     A,@R0
0037 FE                MOV     R6,A
0038 7400        R     MOV     A,#LOW backup
003A 2F                ADD     A,R7
003B F8                MOV     R0,A
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 10  

003C A606              MOV     @R0,AR6
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
003E         ?C0021:
003E 0F                INC     R7
003F 80C1              SJMP    ?C0019
                                           ; SOURCE LINE # 149
0041         ?C0027:
0041 22                RET     
             ; FUNCTION KeyDriver (END)

             ; FUNCTION LedScan (BEGIN)
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 156
0000 E4                CLR     A
0001 F580              MOV     P0,A
                                           ; SOURCE LINE # 157
0003 D2A6              SETB    SEG
                                           ; SOURCE LINE # 158
0005 C2A6              CLR     SEG
                                           ; SOURCE LINE # 160
0007 7580FF            MOV     P0,#0FFH
                                           ; SOURCE LINE # 161
000A D2A7              SETB    DIG
                                           ; SOURCE LINE # 162
000C AF00        R     MOV     R7,idx
000E A807              MOV     R0,AR7
0010 04                INC     A
0011 08                INC     R0
0012 8002              SJMP    ?C0045
0014         ?C0044:
0014 C3                CLR     C
0015 33                RLC     A
0016         ?C0045:
0016 D8FC              DJNZ    R0,?C0044
0018 F4                CPL     A
0019 5280              ANL     P0,A
                                           ; SOURCE LINE # 163
001B C2A7              CLR     DIG
                                           ; SOURCE LINE # 165
001D E4                CLR     A
001E F580              MOV     P0,A
                                           ; SOURCE LINE # 166
0020 D2A6              SETB    SEG
                                           ; SOURCE LINE # 167
0022 7400        R     MOV     A,#LOW LedBuf
0024 2500        R     ADD     A,idx
0026 F8                MOV     R0,A
0027 E6                MOV     A,@R0
0028 F580              MOV     P0,A
                                           ; SOURCE LINE # 168
002A C2A6              CLR     SEG
                                           ; SOURCE LINE # 170
002C C3                CLR     C
002D E500        R     MOV     A,idx
002F 9407              SUBB    A,#07H
0031 7480              MOV     A,#080H
0033 9480              SUBB    A,#080H
0035 5003              JNC     ?C0028
                                           ; SOURCE LINE # 171
0037 0500        R     INC     idx
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 11  

0039 22                RET     
003A         ?C0028:
                                           ; SOURCE LINE # 173
003A E4                CLR     A
003B F500        R     MOV     idx,A
                                           ; SOURCE LINE # 174
003D         ?C0030:
003D 22                RET     
             ; FUNCTION LedScan (END)

             ; FUNCTION KeyScan (BEGIN)
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 184
0000 E500        R     MOV     A,keybuf
0002 25E0              ADD     A,ACC
0004 FF                MOV     R7,A
0005 A2B0              MOV     C,KEY_S2
0007 E4                CLR     A
0008 33                RLC     A
0009 4F                ORL     A,R7
000A F500        R     MOV     keybuf,A
                                           ; SOURCE LINE # 185
000C E500        R     MOV     A,keybuf+01H
000E 25E0              ADD     A,ACC
0010 FF                MOV     R7,A
0011 A2B1              MOV     C,KEY_S3
0013 E4                CLR     A
0014 33                RLC     A
0015 4F                ORL     A,R7
0016 F500        R     MOV     keybuf+01H,A
                                           ; SOURCE LINE # 186
0018 E500        R     MOV     A,keybuf+02H
001A 25E0              ADD     A,ACC
001C FF                MOV     R7,A
001D A2B2              MOV     C,KEY_S4
001F E4                CLR     A
0020 33                RLC     A
0021 4F                ORL     A,R7
0022 F500        R     MOV     keybuf+02H,A
                                           ; SOURCE LINE # 187
0024 E500        R     MOV     A,keybuf+03H
0026 25E0              ADD     A,ACC
0028 FF                MOV     R7,A
0029 A2B3              MOV     C,KEY_S5
002B E4                CLR     A
002C 33                RLC     A
002D 4F                ORL     A,R7
002E F500        R     MOV     keybuf+03H,A
                                           ; SOURCE LINE # 191
;---- Variable 'i' assigned to Register 'R7' ----
0030 E4                CLR     A
0031 FF                MOV     R7,A
0032         ?C0031:
0032 EF                MOV     A,R7
0033 C3                CLR     C
0034 9404              SUBB    A,#04H
0036 7480              MOV     A,#080H
0038 9480              SUBB    A,#080H
003A 5020              JNC     ?C0037
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 12  

003C 7400        R     MOV     A,#LOW keybuf
003E 2F                ADD     A,R7
003F F8                MOV     R0,A
0040 E6                MOV     A,@R0
0041 FD                MOV     R5,A
0042 7C00              MOV     R4,#00H
0044 7008              JNZ     ?C0034
                                           ; SOURCE LINE # 194
0046 7400        R     MOV     A,#LOW KeyStaCur
0048 2F                ADD     A,R7
0049 F8                MOV     R0,A
004A E4                CLR     A
004B F6                MOV     @R0,A
004C 800B              SJMP    ?C0033
004E         ?C0034:
                                           ; SOURCE LINE # 195
004E ED                MOV     A,R5
004F F4                CPL     A
0050 4C                ORL     A,R4
0051 7006              JNZ     ?C0033
                                           ; SOURCE LINE # 196
0053 7400        R     MOV     A,#LOW KeyStaCur
0055 2F                ADD     A,R7
0056 F8                MOV     R0,A
0057 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 197
0059         ?C0033:
0059 0F                INC     R7
005A 80D6              SJMP    ?C0031
                                           ; SOURCE LINE # 198
005C         ?C0037:
005C 22                RET     
             ; FUNCTION KeyScan (END)

             ; FUNCTION StopwatchCount (BEGIN)
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0000 300029            JNB     StopwatchRunning,?C0041
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0003 0500        R     INC     DecimalPart
                                           ; SOURCE LINE # 206
0005 C3                CLR     C
0006 E500        R     MOV     A,DecimalPart
0008 9464              SUBB    A,#064H
000A 7480              MOV     A,#080H
000C 9480              SUBB    A,#080H
000E 401A              JC      ?C0039
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
0010 0500        R     INC     IntegerPart+01H
0012 E500        R     MOV     A,IntegerPart+01H
0014 7002              JNZ     ?C0046
0016 0500        R     INC     IntegerPart
0018         ?C0046:
                                           ; SOURCE LINE # 209
0018 E4                CLR     A
0019 F500        R     MOV     DecimalPart,A
                                           ; SOURCE LINE # 210
001B E500        R     MOV     A,IntegerPart+01H
001D 9410              SUBB    A,#010H
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 13  

001F E500        R     MOV     A,IntegerPart
0021 9427              SUBB    A,#027H
0023 4005              JC      ?C0039
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0025 E4                CLR     A
0026 F500        R     MOV     IntegerPart,A
0028 F500        R     MOV     IntegerPart+01H,A
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
002A         ?C0039:
                                           ; SOURCE LINE # 215
002A D200        R     SETB    StopwatchRefresh
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
002C         ?C0041:
002C 22                RET     
             ; FUNCTION StopwatchCount (END)

             ; FUNCTION InterruptTimer0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D000            MOV     PSW,#00H
0007 C000              PUSH    AR0
0009 C004              PUSH    AR4
000B C005              PUSH    AR5
000D C007              PUSH    AR7
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 224
000F 85008C      R     MOV     TH0,T0RH
                                           ; SOURCE LINE # 225
0012 85008A      R     MOV     TL0,T0RL
                                           ; SOURCE LINE # 227
0015 120000      R     LCALL   LedScan
                                           ; SOURCE LINE # 228
0018 120000      R     LCALL   KeyScan
                                           ; SOURCE LINE # 230
001B 0500        R     INC     timer_2ms
                                           ; SOURCE LINE # 231
001D C3                CLR     C
001E E500        R     MOV     A,timer_2ms
0020 9405              SUBB    A,#05H
0022 7480              MOV     A,#080H
0024 9480              SUBB    A,#080H
0026 4006              JC      ?C0043
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0028 750000      R     MOV     timer_2ms,#00H
                                           ; SOURCE LINE # 234
002B 120000      R     LCALL   StopwatchCount
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
002E         ?C0043:
002E D007              POP     AR7
0030 D005              POP     AR5
0032 D004              POP     AR4
0034 D000              POP     AR0
0036 D0D0              POP     PSW
0038 D0E0              POP     ACC
003A 32                RETI    
             ; FUNCTION InterruptTimer0 (END)

C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 14  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
KeyStaCur. . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    000AH  4
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
XICON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ISP_TRIG . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
T2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
EC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
InterruptTimer0. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  timer_2ms. . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0009H  1
FE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
LedChar. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  16
StopwatchRefresh . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
KeyDriver. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  backup . . . . . . . . . . . . . . .  STATIC   DATA   ARRAY    0000H  4
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
LedScan. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  idx. . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0004H  1
StopwatchDisplay . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0000H  4
T0RH . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000EH  1
RCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
ISP_CMD. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E5H  1
T0RL . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000FH  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
T2EX . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
StopwatchAction. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
StopwatchRunning . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
P00. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
P10. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 15  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P01. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
KeyScan. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  keybuf . . . . . . . . . . . . . . .  STATIC   DATA   ARRAY    0005H  4
P20. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P11. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P02. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
ISP_ADDRH. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
P30. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P21. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
P12. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P03. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
P31. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P22. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
P13. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P04. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
P40. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
LedBuf . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0010H  8
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
P32. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P23. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
P14. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P05. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
P41. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
P33. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
P24. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
P15. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P06. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
ISP_ADDRL. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
P42. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
P34. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P25. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
P16. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P07. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
P43. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
P35. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
P26. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
P17. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
P44. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
P36. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
P27. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
P45. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
P37. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
P46. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
AUXR . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
StopwatchReset . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 16  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
DecimalPart. . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0018H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
KEY_S2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
StopwatchCount . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
KEY_S3 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
KEY_S4 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
KEY_S5 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
DIG. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
ISP_CONTR. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
WDT_CONTR. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
SEG. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
IPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
T2MOD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
ISP_DATA . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
IntegerPart. . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0019H  2
SADEN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
SADDR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
_ConfigTimer0ms. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ms . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  tmp. . . . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0000H  4
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
AUXR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1

C51 COMPILER V9.60.0.0   MAIN                                                              01/31/2022 11:50:32 PAGE 17  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    641    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
